buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'junit:junit:4.8.+'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'com.neenbedankt.android-apt'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-beta-1'
    }
    generatedFilesBaseDir = "$projectDir/gen"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-3'
    compile("org.robolectric:robolectric:3.0")
    compile("org.mockito:mockito-core:1.+") {
        exclude module: 'junit'
        exclude module: 'hamcrest-core'
    }
    compile("com.google.truth:truth:0.28") {
        exclude module: 'junit'
    }
    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.android.gms:play-services:8.4.0'
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
        multiDexEnabled true
    }
    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            proto.srcDirs = ['java']
        }
        androidTest {
            java.srcDirs = ['javatests']
            proto.srcDirs = ['java']
        }

    }

    signingConfigs {
        debug {
            storeFile file("J:/Users/Jeremy/key.jks")
            // storePassword new String(System.console().readPassword("\n\$ Enter keystore password: ")
            keyAlias "jeremyKey"
            // keyPassword new String(System.console().readPassword("\n\$ Enter key password: "))
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        exclude 'META-INF/LICENSE.txt' // will not include LICENSE file
    }
}

